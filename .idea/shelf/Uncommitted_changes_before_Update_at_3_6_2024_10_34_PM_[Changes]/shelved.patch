Index: backend/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require(\"express\")\r\nconst cors = require(\"cors\")\r\n// retrieve the MySQL DB Configuration Module\r\nconst dbConnection = require(\"./config\")\r\n// use this library for parsing HTTP body requests\r\nvar bodyParser = require('body-parser');\r\nconst https = require('https');\r\n\r\n\r\nvar app = express(express.json); \r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n\r\n\r\n\r\n\r\n// (1) Retrieves stock info based on inputted stock symbol. used in Service.js\r\napp.get('/stock-info/:symbol', (req, res) => {\r\n    const { symbol } = req.params;\r\n    const ALPHA_VANTAGE_API_KEY = 'cn6i6k1r01qt2at49vtgcn6i6k1r01qt2at49vu0';\r\n    const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`;\r\n\r\n    https.get(url, (apiRes) => {\r\n        let data = '';\r\n\r\n        apiRes.on('data', (chunk) => {\r\n            data += chunk;\r\n        });\r\n\r\n        apiRes.on('end', () => {\r\n            try {\r\n                const parsedData = JSON.parse(data);\r\n                res.json(parsedData);\r\n            } catch (e) {\r\n                res.status(500).json({ message: 'Error parsing JSON response from Alpha Vantage' });\r\n            }\r\n        });\r\n\r\n    }).on('error', (e) => {\r\n        console.error(`Got error: ${e.message}`);\r\n        res.status(500).json({ message: 'Error fetching stock information from Alpha Vantage' });\r\n    });\r\n});\r\n\r\n\r\n// (2) Retrieves all stock information to display the stock price fluctuation graph. Used in Stock.js\r\napp.get('/stock-graph/:symbol', (req, res) => {\r\n    const { symbol } = req.params;\r\n    const ALPHA_VANTAGE_API_KEY = '8XSVL3X8346AJ8Q7';\r\n    const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&outputsize=compact&apikey=${ALPHA_VANTAGE_API_KEY}`;\r\n\r\n    https.get(url, (apiRes) => {\r\n        let data = '';\r\n\r\n        apiRes.on('data', (chunk) => {\r\n            data += chunk;\r\n        });\r\n\r\n        apiRes.on('end', () => {\r\n            try {\r\n                const parsedData = JSON.parse(data);\r\n                res.json(parsedData);\r\n            } catch (e) {\r\n                res.status(500).json({ message: 'Error parsing JSON response from Alpha Vantage' });\r\n            }\r\n        });\r\n\r\n    }).on('error', (e) => {\r\n        console.error(`Got error: ${e.message}`);\r\n        res.status(500).json({ message: 'Error fetching stock information from Alpha Vantage' });\r\n    });\r\n});\r\n\r\n\r\n// (3) Retrieves all records in Stock table (all the current user's stocks)\r\napp.get('/owned-stocks', (request, response) => {\r\n    const sqlQuery = \"SELECT * FROM Stocks;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); // send a custom header attribute\r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n\r\n// (4) Adds all owned stock prices - portfolio value\r\napp.get('/portfolio-value', (request, response) => {\r\n    const sqlQuery = \"SELECT SUM(CurrentPrice) AS TotalCurrentPrice FROM Stocks;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); // send a custom header attribute\r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n\r\n// (5) Returns the number all owned stock prices \r\napp.get('/stock-count', (request, response) => {\r\n    const sqlQuery = \"SELECT COUNT(*) AS TotalRows FROM Stocks;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); \r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n\r\n// (6) Retrieves Account Login info. response is Username and Password in JSON format\r\napp.get('/portfolio-value', (request, response) => {\r\n    const sqlQuery = \"SELECT Username, Password FROM users;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); \r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n\r\n// (7) insert a new stock by stock symbol\r\napp.post('/buy-stock', (request, response) => {\r\n    const sqlQuery = 'INSERT INTO Stock VALUES (?);';\r\n    const values = [request.body.Symbol, request.body.PriceBought, request.body.CurrentPrice];\r\n    dbConnection.query(sqlQuery, [values], (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Failed: Record was not added.\"});\r\n    }\r\n    return response.status(200).json({Success: \"Successful: Record was added!.\"});\r\n    });\r\n});\r\n\r\n\r\n// (8) Delete a stock, called when user sells a stock\r\napp.delete('/sell-stock', (request, response) => {\r\n    const Symbol = request.params.Symbol;\r\n    const sqlQuery = \"DELETE FROM Stocks WHERE Symbol = ? ; \";\r\n    dbConnection.query(sqlQuery, Symbol, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({ Error: \"Failed: Record was not deleted\" });\r\n    }\r\n    return response.status(200).json({ Success: \"Succcessful: Record was deleted!\" });\r\n    });\r\n});\r\n\r\n\r\n// (9) update the current price of an owned stock \r\napp.put('/update-current-price/:Symbol', (request, response) => {\r\n    const Symbol = request.params.Symbol; \r\n    const sqlQuery = `UPDATE Stocks SET CurrentPrice = ? WHERE Name = ?;`;\r\n    const values = [request.body.CurrentPrice, Symbol];\r\n\r\n    dbConnection.query(sqlQuery, values, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return response.status(400).json({Error: \"Failed: Record was not updated.\"});\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return response.status(404).json({Error: \"Not Found: Stock was not found.\"});\r\n        }\r\n        return response.status(200).json({Success: \"Successful: Record was updated!\"});\r\n    });\r\n});\r\n\r\n\r\n// (10) update the password to something new \r\napp.put('/update-password', (request, response) => {\r\n    const newPassword = request.body.Password;\r\n    const sqlQuery = `UPDATE users SET Password = ?;`;\r\n    dbConnection.query(sqlQuery, [newPassword], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return response.status(400).json({Error: \"Failed: Password was not updated.\"});\r\n        }\r\n        return response.status(200).json({Success: \"Successful: Password was updated!\"});\r\n    });\r\n});\r\n\r\n\r\n// (11) update the buying power, called when a stock is bought or sold \r\napp.put('/update-buying-power', (request, response) => {\r\n    const newBuyingPower = request.body.BuyingPower; \r\n    const sqlQuery = `UPDATE users SET BuyingPower = ?;`;\r\n    dbConnection.query(sqlQuery, [newBuyingPower], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return response.status(400).json({Error: \"Failed: BuyingPower was not updated.\"});\r\n        }\r\n        return response.status(200).json({Success: \"Successful: BuyingPower was updated!\"});\r\n    });\r\n});\r\n\r\n\r\n// app.listen(2000, () => {\r\n//     console.log(\"Express server is running and listening\");\r\n// }); \r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/index.js b/backend/index.js
--- a/backend/index.js	(revision 7352c5d0272ff4b048995cbc9ddfaada4c9d2945)
+++ b/backend/index.js	(date 1709791752499)
@@ -199,8 +199,8 @@
 });
 
 
-// app.listen(2000, () => {
-//     console.log("Express server is running and listening");
-// }); 
+app.listen(2000, () => {
+    console.log("Express server is running and listening");
+});
 
 
