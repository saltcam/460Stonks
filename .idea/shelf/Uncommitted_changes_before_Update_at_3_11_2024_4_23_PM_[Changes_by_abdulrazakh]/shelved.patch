Index: backend/routes/accountRoute.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require(\"express\")\r\nconst cors = require(\"cors\")\r\nvar bodyParser = require('body-parser');\r\nconst https = require('https');\r\nconst router = express.Router();\r\nconst dbConnection = require('../config');\r\n\r\nrouter.use(express.json()); \r\n\r\nrouter.use(cors());\r\nrouter.use(bodyParser.json());\r\n\r\n/**\r\n * @swagger\r\n {\r\n  \"/owned-stocks\": {\r\n    \"get\": {\r\n      \"summary\": \"Retrieves all records in the Stocks table (all the current user's stocks).\",\r\n      \"description\": \"This endpoint retrieves all records in the Stocks table, representing all the stocks owned by the current user.\",\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response with the list of owned stocks.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Error in the SQL statement. Please check.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n// (3) Retrieves all records in Stock table (all the current user's stocks)\r\nrouter.get('/owned-stocks', (request, response) => {\r\n    const sqlQuery = \"SELECT * FROM Stocks;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); // send a custom header attribute\r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * {\r\n  \"/portfolio-value\": {\r\n    \"get\": {\r\n      \"summary\": \"Adds all owned stock prices to calculate the portfolio value.\",\r\n      \"description\": \"This endpoint calculates the total value of all the stocks owned by the current user.\",\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response with the total portfolio value.\",\r\n          \"schema\": {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              \"TotalCurrentPrice\": {\r\n                \"type\": \"number\",\r\n                \"description\": \"The total value of all owned stocks.\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Error in the SQL statement. Please check.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n// (4) Adds all owned stock prices - portfolio value\r\nrouter.get('/portfolio-value', (request, response) => {\r\n    const sqlQuery = \"SELECT SUM(CurrentPrice) AS TotalCurrentPrice FROM Stocks;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); // send a custom header attribute\r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * \r\n * {\r\n  \"/stock-count\": {\r\n    \"get\": {\r\n      \"summary\": \"Returns the number of all owned stock prices.\",\r\n      \"description\": \"This endpoint retrieves the total count of all the stocks owned by the current user.\",\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response with the total count of owned stocks.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Error in the SQL statement. Please check.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n// (5) Returns the number all owned stock prices \r\nrouter.get('/stock-count', (request, response) => {\r\n    const sqlQuery = \"SELECT COUNT(*) AS TotalRows FROM Stocks;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); \r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * @swagger\r\n * \r\n * {\r\n  \"/portfolio-value\": {\r\n    \"get\": {\r\n      \"summary\": \"Retrieves account login information.\",\r\n      \"description\": \"This endpoint retrieves the username and password of all user accounts.\",\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response with account login information.\",\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"type\": \"array\",\r\n                \"items\": {\r\n                  \"type\": \"object\",\r\n                  \"properties\": {\r\n                    \"Username\": {\r\n                      \"type\": \"string\",\r\n                      \"description\": \"The username of the account.\"\r\n                    },\r\n                    \"Password\": {\r\n                      \"type\": \"string\",\r\n                      \"description\": \"The password of the account.\"\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Error in the SQL statement. Please check.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n// (6) Retrieves Account Login info. response is Username and Password in JSON format\r\nrouter.get('/portfolio-value', (request, response) => {\r\n    const sqlQuery = \"SELECT Username, Password FROM users;\";\r\n    dbConnection.query(sqlQuery, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Error in the SQL statement. Please check.\"});\r\n    }\r\n    response.setHeader('SQLQuery', sqlQuery); \r\n    return response.status(200).json(result);\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * \r\n * {\r\n  \"/buy-stock\": {\r\n    \"post\": {\r\n      \"summary\": \"Inserts a new stock by stock symbol.\",\r\n      \"description\": \"This endpoint adds a new stock record to the database.\",\r\n      \"requestBody\": {\r\n        \"required\": true,\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"Symbol\": {\r\n                  \"type\": \"string\",\r\n                  \"description\": \"The symbol of the stock.\"\r\n                },\r\n                \"PriceBought\": {\r\n                  \"type\": \"number\",\r\n                  \"description\": \"The price at which the stock was bought.\"\r\n                },\r\n                \"CurrentPrice\": {\r\n                  \"type\": \"number\",\r\n                  \"description\": \"The current price of the stock.\"\r\n                }\r\n              },\r\n              \"required\": [\"Symbol\", \"PriceBought\", \"CurrentPrice\"]\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response. Record was added successfully.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Failed to add record to the database.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n// (7) insert a new stock by stock symbol\r\nrouter.post('/buy-stock', (request, response) => {\r\n    const sqlQuery = 'INSERT INTO Stock VALUES (?);';\r\n    const values = [request.body.Symbol, request.body.PriceBought, request.body.CurrentPrice];\r\n    dbConnection.query(sqlQuery, [values], (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({Error: \"Failed: Record was not added.\"});\r\n    }\r\n    return response.status(200).json({Success: \"Successful: Record was added!.\"});\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * {\r\n  \"/sell-stock\": {\r\n    \"delete\": {\r\n      \"summary\": \"Deletes a stock.\",\r\n      \"description\": \"This endpoint removes a stock record from the database when a user sells a stock.\",\r\n      \"parameters\": [\r\n        {\r\n          \"in\": \"query\",\r\n          \"name\": \"Symbol\",\r\n          \"required\": true,\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"description\": \"The symbol of the stock to be deleted.\"\r\n        }\r\n      ],\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response. Record was deleted successfully.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Failed to delete record from the database.\",\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n// (8) Delete a stock, called when user sells a stock\r\nrouter.delete('/sell-stock', (request, response) => {\r\n    const Symbol = request.params.Symbol;\r\n    const sqlQuery = \"DELETE FROM Stocks WHERE Symbol = ? ; \";\r\n    dbConnection.query(sqlQuery, Symbol, (err, result) => {\r\n    if (err) {\r\n    return response.status(400).json({ Error: \"Failed: Record was not deleted\" });\r\n    }\r\n    return response.status(200).json({ Success: \"Succcessful: Record was deleted!\" });\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * \r\n * {\r\n  \"/update-current-price/{Symbol}\": {\r\n    \"put\": {\r\n      \"summary\": \"Updates the current price of an owned stock.\",\r\n      \"description\": \"This endpoint updates the current price of a stock in the database.\",\r\n      \"parameters\": [\r\n        {\r\n          \"in\": \"path\",\r\n          \"name\": \"Symbol\",\r\n          \"required\": true,\r\n          \"schema\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"description\": \"The symbol of the stock to be updated.\"\r\n        }\r\n      ],\r\n      \"requestBody\": {\r\n        \"required\": true,\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"CurrentPrice\": {\r\n                  \"type\": \"number\",\r\n                  \"description\": \"The new current price of the stock.\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response. Record was updated successfully.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Failed to update record in the database.\",\r\n        },\r\n        \"404\": {\r\n          \"description\": \"Not found. Stock was not found in the database.\",\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n// (9) update the current price of an owned stock \r\nrouter.put('/update-current-price/:Symbol', (request, response) => {\r\n    const Symbol = request.params.Symbol; \r\n    const sqlQuery = `UPDATE Stocks SET CurrentPrice = ? WHERE Name = ?;`;\r\n    const values = [request.body.CurrentPrice, Symbol];\r\n\r\n    dbConnection.query(sqlQuery, values, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return response.status(400).json({Error: \"Failed: Record was not updated.\"});\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return response.status(404).json({Error: \"Not Found: Stock was not found.\"});\r\n        }\r\n        return response.status(200).json({Success: \"Successful: Record was updated!\"});\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * \r\n * {\r\n  \"/update-password\": {\r\n    \"put\": {\r\n      \"summary\": \"Updates the password to something new.\",\r\n      \"description\": \"This endpoint updates the password of a user in the database.\",\r\n      \"requestBody\": {\r\n        \"required\": true,\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"Password\": {\r\n                  \"type\": \"string\",\r\n                  \"description\": \"The new password.\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response. Password was updated successfully.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Failed to update password in the database.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n// (10) update the password to something new \r\nrouter.put('/update-password', (request, response) => {\r\n    const newPassword = request.body.Password;\r\n    const sqlQuery = `UPDATE users SET Password = ?;`;\r\n    dbConnection.query(sqlQuery, [newPassword], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return response.status(400).json({Error: \"Failed: Password was not updated.\"});\r\n        }\r\n        return response.status(200).json({Success: \"Successful: Password was updated!\"});\r\n    });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * {\r\n  \"/update-buying-power\": {\r\n    \"put\": {\r\n      \"summary\": \"Updates the buying power.\",\r\n      \"description\": \"This endpoint updates the buying power of a user in the database.\",\r\n      \"requestBody\": {\r\n        \"required\": true,\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"type\": \"object\",\r\n              \"properties\": {\r\n                \"BuyingPower\": {\r\n                  \"type\": \"number\",\r\n                  \"description\": \"The new buying power.\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \"responses\": {\r\n        \"200\": {\r\n          \"description\": \"Successful response. Buying power was updated successfully.\"\r\n        },\r\n        \"400\": {\r\n          \"description\": \"Bad request. Failed to update buying power in the database.\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n// (11) update the buying power, called when a stock is bought or sold \r\nrouter.put('/update-buying-power', (request, response) => {\r\n    const newBuyingPower = request.body.BuyingPower; \r\n    const sqlQuery = `UPDATE users SET BuyingPower = ?;`;\r\n    dbConnection.query(sqlQuery, [newBuyingPower], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return response.status(400).json({Error: \"Failed: BuyingPower was not updated.\"});\r\n        }\r\n        return response.status(200).json({Success: \"Successful: BuyingPower was updated!\"});\r\n    });\r\n});\r\n\r\n\r\nmodule.exports = router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/routes/accountRoute.js b/backend/routes/accountRoute.js
--- a/backend/routes/accountRoute.js	(revision e0d971b1e6f45d401e2dda465d824878bca879b4)
+++ b/backend/routes/accountRoute.js	(date 1710194417647)
@@ -120,7 +120,7 @@
  * @swagger
  * 
  * {
-  "/portfolio-value": {
+  "/username-password": {
     "get": {
       "summary": "Retrieves account login information.",
       "description": "This endpoint retrieves the username and password of all user accounts.",
@@ -158,7 +158,7 @@
  */
 
 // (6) Retrieves Account Login info. response is Username and Password in JSON format
-router.get('/portfolio-value', (request, response) => {
+router.get('/username-password', (request, response) => {
     const sqlQuery = "SELECT Username, Password FROM users;";
     dbConnection.query(sqlQuery, (err, result) => {
     if (err) {
@@ -436,5 +436,37 @@
     });
 });
 
+/**
+ * @swagger
+ * /check-buying-power:
+ *   get:
+ *     summary: Retrieves the buying power of the user.
+ *     responses:
+ *       200:
+ *         description: Successful response with the buying power information.
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 BuyingPower:
+ *                   type: number
+ *                   description: The current buying power of the user.
+ *       400:
+ *         description: Error in the SQL statement.
+ *
+ */
+// (12) Retrieves Account Login info. response is Username and Password in JSON format
+router.get('/check-buying-power', (request, response) => {
+    const sqlQuery = "SELECT BuyingPower FROM users;";
+    dbConnection.query(sqlQuery, (err, result) => {
+        if (err) {
+            return response.status(400).json({Error: "Error in the SQL statement. Please check."});
+        }
+        response.setHeader('SQLQuery', sqlQuery);
+        return response.status(200).json(result);
+    });
+});
+
 
 module.exports = router;
\ No newline at end of file
